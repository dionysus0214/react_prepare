{"ast":null,"code":"import { all, fork, takeLatest, put, delay } from 'redux-saga/effects';\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shordId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/NodeJS/react-twitter/prepare/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","axios","shortId","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_TO_ME","addPostAPI","data","post","addPost","action","id","shordId","generate","type","content","err","error","response","addCommentAPI","postId","addComment","watchAddPost","watchAddComment","postSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,UAAnB,EAA+BC,GAA/B,EAAoCC,KAApC,QAAgD,oBAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,SACEC,mBADF,EACuBC,mBADvB,EAC4CC,mBAD5C,EAEEC,gBAFF,EAEoBC,gBAFpB,EAEsCC,gBAFtC,QAGO,kBAHP;AAIA,SAAQC,cAAR,QAA6B,kBAA7B;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOV,KAAK,CAACW,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACD;;AAED,UAAUE,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF;AACA,UAAMd,KAAK,CAAC,IAAD,CAAX;AACA,UAAMe,EAAE,GAAGC,OAAO,CAACC,QAAR,EAAX;AACA,UAAMlB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAGV,gBADC;AAERG,MAAAA,IAAI,EAAG;AACLI,QAAAA,EADK;AAELI,QAAAA,OAAO,EAAEL,MAAM,CAACH;AAFX;AAFC,KAAD,CAAT;AAOA,UAAMZ,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAET,cADE;AAERE,MAAAA,IAAI,EAAEI;AAFE,KAAD,CAAT;AAID,GAfD,CAeE,OAAMK,GAAN,EAAW;AACX,UAAMrB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAGZ,gBADC;AAERe,MAAAA,KAAK,EAAGD,GAAG,CAACE,QAAJ,CAAaX;AAFb,KAAD,CAAT;AAID;AACF;;AAED,SAASY,aAAT,CAAuBZ,IAAvB,EAA6B;AAC3B,SAAOV,KAAK,CAACW,IAAN,CAAY,aAAYD,IAAI,CAACa,MAAO,UAApC,EAA+Cb,IAA/C,CAAP;AACD;;AAED,UAAUc,UAAV,CAAqBX,MAArB,EAA6B;AAC3B,MAAI;AACF;AACA,UAAMd,KAAK,CAAC,IAAD,CAAX;AACA,UAAMD,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAGb,mBADC;AAERM,MAAAA,IAAI,EAAGG,MAAM,CAACH;AAFN,KAAD,CAAT;AAID,GAPD,CAOE,OAAMS,GAAN,EAAW;AACX,UAAMrB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAGf,mBADC;AAERkB,MAAAA,KAAK,EAAGD,GAAG,CAACE,QAAJ,CAAaX;AAFb,KAAD,CAAT;AAID;AACF;;AAED,UAAUe,YAAV,GAAyB;AACvB,QAAM5B,UAAU,CAACS,gBAAD,EAAmBM,OAAnB,CAAhB;AACD;;AAED,UAAUc,eAAV,GAA4B;AAC1B,QAAM7B,UAAU,CAACM,mBAAD,EAAsBqB,UAAtB,CAAhB;AACD;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAMhC,GAAG,CAAC,CACRC,IAAI,CAAC6B,YAAD,CADI,EAER7B,IAAI,CAAC8B,eAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import {all, fork, takeLatest, put, delay} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport shortId from 'shortid';\r\n\r\nimport {\r\n  ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS,\r\n} from '../reducers/post';\r\nimport {ADD_POST_TO_ME} from '../reducers/user';\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/api/post', data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shordId.generate();\r\n    yield put({\r\n      type : ADD_POST_SUCCESS,      \r\n      data : {\r\n        id,\r\n        content: action.data,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch(err) {\r\n    yield put({\r\n      type : ADD_POST_FAILURE,\r\n      error : err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type : ADD_COMMENT_SUCCESS,\r\n      data : action.data,\r\n    });\r\n  } catch(err) {\r\n    yield put({\r\n      type : ADD_COMMENT_FAILURE,\r\n      error : err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}"]},"metadata":{},"sourceType":"module"}