{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\NodeJS\\\\react-twitter\\\\prepare\\\\front\\\\components\\\\PostCardContent.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport Link from 'next/link';\nimport { Button, Input } from 'antd';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nconst {\n  TextArea\n} = Input;\n\nconst PostCardContent = ({\n  postData,\n  editMode,\n  onChangePost,\n  onCancelUpdate\n}) => {\n  const {\n    updatePostLoading,\n    updatePostDone\n  } = useSelector(state => state.post);\n  const {\n    0: editText,\n    1: setEditText\n  } = useState(postData);\n  useEffect(() => {\n    if (updatePostDone) {\n      onCancelUpdate();\n    }\n  }, [updatePostDone]);\n  const onChangeText = useCallback(e => {\n    setEditText(e.target.value);\n  });\n  return (\n    /*#__PURE__*/\n    // 첫 번째 게시글 #해시태그 #해시태그\n    _jsxDEV(\"div\", {\n      children: editMode ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(TextArea, {\n          value: editText,\n          onChange: onChangeText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            loading: updatePostLoading,\n            onClick: onChangePost(editText),\n            children: \"\\uC218\\uC815\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"danger\",\n            onClick: onCancelUpdate,\n            children: \"\\uCDE8\\uC18C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : postData.split(/(#[^\\s#]+)/g).map((v, i) => {\n        if (v.match(/(#[^\\s#]+)/)) {\n          return /*#__PURE__*/_jsxDEV(Link, {\n            href: `/hashtag/${v.slice(1)}`,\n            prefetch: false,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: v\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 83\n            }, this)\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 20\n          }, this);\n        }\n\n        return v;\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }, this)\n  );\n};\n\nPostCardContent.propTypes = {\n  postData: PropTypes.string.isRequired,\n  editMode: PropTypes.bool,\n  onChangePost: PropTypes.func.isRequired,\n  onCancelUpdate: PropTypes.func.isRequired\n};\nPostCardContent.defaultProps = {\n  editMode: false\n};\nexport default PostCardContent;","map":{"version":3,"sources":["C:/NodeJS/react-twitter/prepare/front/components/PostCardContent.js"],"names":["React","useState","useCallback","useEffect","Link","Button","Input","PropTypes","useSelector","TextArea","PostCardContent","postData","editMode","onChangePost","onCancelUpdate","updatePostLoading","updatePostDone","state","post","editText","setEditText","onChangeText","e","target","value","split","map","v","i","match","slice","propTypes","string","isRequired","bool","func","defaultProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,MAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAeH,KAArB;;AACA,MAAMI,eAAe,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,QAAZ;AAAsBC,EAAAA,YAAtB;AAAoCC,EAAAA;AAApC,CAAD,KAA0D;AAChF,QAAM;AAAEC,IAAAA,iBAAF;AAAqBC,IAAAA;AAArB,MAAwCR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAAzD;AACA,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BnB,QAAQ,CAACU,QAAD,CAAxC;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,cAAJ,EAAoB;AAClBF,MAAAA,cAAc;AACf;AACF,GAJQ,EAIN,CAACE,cAAD,CAJM,CAAT;AAMA,QAAMK,YAAY,GAAGnB,WAAW,CAAEoB,CAAD,IAAO;AACtCF,IAAAA,WAAW,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAX;AACD,GAF+B,CAAhC;AAIA;AAAA;AAAS;AACP;AAAA,gBACGZ,QAAQ,gBAEL;AAAA,gCACE,QAAC,QAAD;AAAU,UAAA,KAAK,EAAEO,QAAjB;AAA2B,UAAA,QAAQ,EAAEE;AAArC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD,CAAQ,KAAR;AAAA,kCACE,QAAC,MAAD;AAAQ,YAAA,OAAO,EAAEN,iBAAjB;AAAoC,YAAA,OAAO,EAAEF,YAAY,CAACM,QAAD,CAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,OAAO,EAAEL,cAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA,sBAFK,GAULH,QAAQ,CAACc,KAAT,CAAe,aAAf,EAA8BC,GAA9B,CAAkC,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC5C,YAAID,CAAC,CAACE,KAAF,CAAQ,YAAR,CAAJ,EAA2B;AACzB,8BAAO,QAAC,IAAD;AAAM,YAAA,IAAI,EAAG,YAAWF,CAAC,CAACG,KAAF,CAAQ,CAAR,CAAW,EAAnC;AAAsC,YAAA,QAAQ,EAAE,KAAhD;AAAA,mCAA+D;AAAA,wBAAIH;AAAJ;AAAA;AAAA;AAAA;AAAA;AAA/D,aAA4DC,CAA5D;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD;;AACD,eAAOD,CAAP;AACD,OALC;AAXN;AAAA;AAAA;AAAA;AAAA;AADF;AAoBD,CAlCD;;AAoCAjB,eAAe,CAACqB,SAAhB,GAA4B;AAC1BpB,EAAAA,QAAQ,EAAEJ,SAAS,CAACyB,MAAV,CAAiBC,UADD;AAE1BrB,EAAAA,QAAQ,EAAEL,SAAS,CAAC2B,IAFM;AAG1BrB,EAAAA,YAAY,EAAEN,SAAS,CAAC4B,IAAV,CAAeF,UAHH;AAI1BnB,EAAAA,cAAc,EAAEP,SAAS,CAAC4B,IAAV,CAAeF;AAJL,CAA5B;AAOAvB,eAAe,CAAC0B,YAAhB,GAA+B;AAC7BxB,EAAAA,QAAQ,EAAE;AADmB,CAA/B;AAIA,eAAeF,eAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport Link from 'next/link';\r\nimport { Button, Input } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst { TextArea } = Input;\r\nconst PostCardContent = ({ postData, editMode, onChangePost, onCancelUpdate }) => {\r\n  const { updatePostLoading, updatePostDone } = useSelector((state) => state.post);\r\n  const [editText, setEditText] = useState(postData);\r\n\r\n  useEffect(() => {\r\n    if (updatePostDone) {\r\n      onCancelUpdate();\r\n    }\r\n  }, [updatePostDone]);\r\n\r\n  const onChangeText = useCallback((e) => {\r\n    setEditText(e.target.value);\r\n  });\r\n\r\n  return ( // 첫 번째 게시글 #해시태그 #해시태그\r\n    <div>\r\n      {editMode\r\n        ? (\r\n          <>\r\n            <TextArea value={editText} onChange={onChangeText} />\r\n            <Button.Group>\r\n              <Button loading={updatePostLoading} onClick={onChangePost(editText)}>수정</Button>\r\n              <Button type=\"danger\" onClick={onCancelUpdate}>취소</Button>\r\n            </Button.Group>\r\n          </>\r\n        )\r\n        : postData.split(/(#[^\\s#]+)/g).map((v, i) => {\r\n          if (v.match(/(#[^\\s#]+)/)) {\r\n            return <Link href={`/hashtag/${v.slice(1)}`} prefetch={false} key={i}><a>{v}</a></Link>;\r\n          }\r\n          return v;\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCardContent.propTypes = {\r\n  postData: PropTypes.string.isRequired,\r\n  editMode: PropTypes.bool,\r\n  onChangePost: PropTypes.func.isRequired,\r\n  onCancelUpdate: PropTypes.func.isRequired,\r\n};\r\n\r\nPostCardContent.defaultProps = {\r\n  editMode: false,\r\n};\r\n\r\nexport default PostCardContent;"]},"metadata":{},"sourceType":"module"}