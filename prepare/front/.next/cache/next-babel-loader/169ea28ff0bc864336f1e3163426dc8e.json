{"ast":null,"code":"import { all, fork, takeLatest, put, delay, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/NodeJS/react-twitter/prepare/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","throttle","call","axios","UNLIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","LIKE_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","likePostAPI","data","patch","likePost","action","result","type","err","console","error","response","unlikePostAPI","delete","unlikePost","loadPostsAPI","get","loadPosts","addPostAPI","post","content","addPost","id","removePostAPI","removePost","addCommentAPI","postId","addComment","watchLikePost","watchUnlikePost","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {all, fork, takeLatest, put, delay, throttle, call} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n  UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS,\r\n  LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS,\r\n  LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS,\r\n  ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS,\r\n} from '../reducers/post';\r\nimport {ADD_POST_TO_ME, REMOVE_POST_OF_ME} from '../reducers/user';\r\n\r\nfunction likePostAPI(data) {\r\n  return axios.patch(`/post/${data}/like`);\r\n}\r\n\r\nfunction* likePost(action) {\r\n  try {\r\n    const result = yield call(likePostAPI, action.data);\r\n    yield put({\r\n      type: LIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LIKE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction unlikePostAPI(data) {\r\n  return axios.delete(`/post/${data}/like`);\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n  try {\r\n    const result = yield call(unlikePostAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_POST_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNLIKE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get('/posts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/post', {content: data});\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type : ADD_POST_SUCCESS,      \r\n      data : result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch(err) {\r\n    yield put({\r\n      type : ADD_POST_FAILURE,\r\n      error : err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete(`/post/${data}`);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    const result = yield call(removePostAPI, action.data);\r\n    yield put({\r\n      type : REMOVE_POST_SUCCESS,      \r\n      data : result.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch(err) {\r\n    yield put({\r\n      type : REMOVE_POST_FAILURE,\r\n      error : err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type : ADD_COMMENT_SUCCESS,\r\n      data : result.data,\r\n    });\r\n  } catch(err) {\r\n    console.error(err);\r\n    yield put({\r\n      type : ADD_COMMENT_FAILURE,\r\n      error : err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchLikePost),\r\n    fork(watchUnlikePost),\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}"]},"metadata":{},"sourceType":"module"}