{"ast":null,"code":"import { all, fork, takeLatest, put, delay, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data, {\n    withCredentials: true\n  });\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/NodeJS/react-twitter/prepare/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","throttle","call","axios","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","result","type","err","response","addPostAPI","post","content","withCredentials","addPost","id","error","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {all, fork, takeLatest, put, delay, throttle, call} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\n\r\nimport {\r\n  LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS,\r\n  ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS,\r\n} from '../reducers/post';\r\nimport {ADD_POST_TO_ME, REMOVE_POST_OF_ME} from '../reducers/user';\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get('/posts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const result = yield call(loadPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: result.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/post', {content: data}, {withCredentials: true});\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type : ADD_POST_SUCCESS,      \r\n      data : result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch(err) {\r\n    yield put({\r\n      type : ADD_POST_FAILURE,\r\n      error : err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete('/api/post', data, {withCredentials: true});\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type : REMOVE_POST_SUCCESS,      \r\n      data : action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch(err) {\r\n    yield put({\r\n      type : REMOVE_POST_FAILURE,\r\n      error : err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type : ADD_COMMENT_SUCCESS,\r\n      data : result.data,\r\n    });\r\n  } catch(err) {\r\n    yield put({\r\n      type : ADD_COMMENT_FAILURE,\r\n      error : err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}"]},"metadata":{},"sourceType":"module"}