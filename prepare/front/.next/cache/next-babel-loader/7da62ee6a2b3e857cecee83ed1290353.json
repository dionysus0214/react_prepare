{"ast":null,"code":"import { all, fork, takeLatest, put, delay, throttle, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport shortId from 'shortid';\nimport { LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, generateDummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction loadPostsAPI(data) {\n  return axios.get('/api/posts', data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(loadPostsAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete('/api/post', data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/NodeJS/react-twitter/prepare/front/sagas/post.js"],"names":["all","fork","takeLatest","put","delay","throttle","call","axios","shortId","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostsAPI","data","get","loadPosts","action","type","err","response","addPostAPI","post","content","addPost","result","id","error","removePostAPI","delete","removePost","addCommentAPI","postId","addComment","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import {all, fork, takeLatest, put, delay, throttle, call} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport shortId from 'shortid';\r\n\r\nimport {\r\n  LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS,\r\n  ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS,\r\n  REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS,\r\n  generateDummyPost,\r\n} from '../reducers/post';\r\nimport {ADD_POST_TO_ME, REMOVE_POST_OF_ME} from '../reducers/user';\r\n\r\nfunction loadPostsAPI(data) {\r\n  return axios.get('/api/posts', data);\r\n}\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    // const result = yield call(loadPostsAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: generateDummyPost(10),\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      data: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post('/post', {content: data});\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type : ADD_POST_SUCCESS,      \r\n      data : result.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: result.data.id,\r\n    });\r\n  } catch(err) {\r\n    yield put({\r\n      type : ADD_POST_FAILURE,\r\n      error : err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.delete('/api/post', data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type : REMOVE_POST_SUCCESS,      \r\n      data : action.data,\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch(err) {\r\n    yield put({\r\n      type : REMOVE_POST_FAILURE,\r\n      error : err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const result = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type : ADD_COMMENT_SUCCESS,\r\n      data : result.data,\r\n    });\r\n  } catch(err) {\r\n    yield put({\r\n      type : ADD_COMMENT_FAILURE,\r\n      error : err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchLoadPosts),\r\n    fork(watchRemovePost),\r\n    fork(watchAddComment),\r\n  ]);\r\n}"]},"metadata":{},"sourceType":"module"}