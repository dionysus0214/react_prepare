{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { Form, Input, Button } from 'antd';\nimport React, { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useInput from '../hooks/useInput';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nvar CommentForm = function CommentForm(_ref) {\n  var post = _ref.post;\n  var dispatch = useDispatch();\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addCommentDone = _useSelector.addCommentDone,\n      addCommentLoading = _useSelector.addCommentLoading;\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      commentText = _useInput2[0],\n      onChangeCommentText = _useInput2[1],\n      setCommentText = _useInput2[2];\n\n  useEffect(function () {\n    if (addCommentDone) {\n      setCommentText('');\n    }\n  }, [addCommentDone]);\n  var onSubmitComment = useCallback(function () {\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        postId: post.id,\n        userId: id\n      }\n    });\n  }, [commentText, id]);\n  return /*#__PURE__*/_jsx(Form, {\n    onFinish: onSubmitComment,\n    children: /*#__PURE__*/_jsxs(Form.Item, {\n      style: {\n        position: 'relative',\n        margin: 0\n      },\n      children: [/*#__PURE__*/_jsx(Input.TextArea, {\n        value: commentText,\n        onChange: onChangeCommentText,\n        rows: 4\n      }), /*#__PURE__*/_jsx(Button, {\n        style: {\n          position: 'absolute',\n          right: 0,\n          bottom: -40,\n          zIndex: 1\n        },\n        type: \"primary\",\n        htmlType: \"submit\",\n        loading: addCommentLoading,\n        children: \"\\uC220\\uC220\"\n      })]\n    })\n  });\n};\n\nexport default CommentForm;","map":{"version":3,"sources":["C:/NodeJS/react-twitter/prepare/front/components/CommentForm.js"],"names":["Form","Input","Button","React","useCallback","useEffect","useDispatch","useSelector","useInput","ADD_COMMENT_REQUEST","CommentForm","post","dispatch","id","state","user","me","addCommentDone","addCommentLoading","commentText","onChangeCommentText","setCommentText","onSubmitComment","type","data","content","postId","userId","position","margin","right","bottom","zIndex"],"mappings":";;;AAAA,SAAQA,IAAR,EAAcC,KAAd,EAAqBC,MAArB,QAAkC,MAAlC;AACA,OAAOC,KAAP,IAAeC,WAAf,EAA4BC,SAA5B,QAA4C,OAA5C;AAEA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AAEA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAAQC,mBAAR,QAAkC,kBAAlC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAY;AAAA,MAAVC,IAAU,QAAVA,IAAU;AAC9B,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,MAAMO,EAAE,GAAGN,WAAW,CAAC,UAACO,KAAD;AAAA;;AAAA,6BAAWA,KAAK,CAACC,IAAN,CAAWC,EAAtB,mDAAW,eAAeH,EAA1B;AAAA,GAAD,CAAtB;;AAF8B,qBAGcN,WAAW,CAAC,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACH,IAAjB;AAAA,GAAD,CAHzB;AAAA,MAGvBM,cAHuB,gBAGvBA,cAHuB;AAAA,MAGPC,iBAHO,gBAGPA,iBAHO;;AAAA,kBAI6BV,QAAQ,CAAC,EAAD,CAJrC;AAAA;AAAA,MAIvBW,WAJuB;AAAA,MAIVC,mBAJU;AAAA,MAIWC,cAJX;;AAM9BhB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAGY,cAAH,EAAmB;AACjBI,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD;AACF,GAJQ,EAIN,CAACJ,cAAD,CAJM,CAAT;AAMA,MAAMK,eAAe,GAAGlB,WAAW,CAAC,YAAM;AACxCQ,IAAAA,QAAQ,CAAC;AACPW,MAAAA,IAAI,EAAEd,mBADC;AAEPe,MAAAA,IAAI,EAAE;AAACC,QAAAA,OAAO,EAAEN,WAAV;AAAuBO,QAAAA,MAAM,EAAEf,IAAI,CAACE,EAApC;AAAwCc,QAAAA,MAAM,EAAEd;AAAhD;AAFC,KAAD,CAAR;AAID,GALkC,EAKhC,CAACM,WAAD,EAAcN,EAAd,CALgC,CAAnC;AAOA,sBACE,KAAC,IAAD;AAAM,IAAA,QAAQ,EAAES,eAAhB;AAAA,2BACE,MAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAE;AAACM,QAAAA,QAAQ,EAAE,UAAX;AAAuBC,QAAAA,MAAM,EAAE;AAA/B,OAAlB;AAAA,8BACE,KAAC,KAAD,CAAO,QAAP;AAAgB,QAAA,KAAK,EAAEV,WAAvB;AAAoC,QAAA,QAAQ,EAAEC,mBAA9C;AAAmE,QAAA,IAAI,EAAE;AAAzE,QADF,eAEE,KAAC,MAAD;AAAQ,QAAA,KAAK,EAAE;AAACQ,UAAAA,QAAQ,EAAE,UAAX;AAAuBE,UAAAA,KAAK,EAAE,CAA9B;AAAiCC,UAAAA,MAAM,EAAE,CAAC,EAA1C;AAA8CC,UAAAA,MAAM,EAAE;AAAtD,SAAf;AAAyE,QAAA,IAAI,EAAC,SAA9E;AAAwF,QAAA,QAAQ,EAAC,QAAjG;AAA0G,QAAA,OAAO,EAAEd,iBAAnH;AAAA;AAAA,QAFF;AAAA;AADF,IADF;AAQD,CA3BD;;AAiCA,eAAeR,WAAf","sourcesContent":["import {Form, Input, Button} from 'antd';\r\nimport React, {useCallback, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\n\r\nimport useInput from '../hooks/useInput';\r\nimport {ADD_COMMENT_REQUEST} from '../reducers/post';\r\n\r\nconst CommentForm = ({post}) => {\r\n  const dispatch = useDispatch();\r\n  const id = useSelector((state) => state.user.me?.id);\r\n  const {addCommentDone, addCommentLoading} = useSelector((state) => state.post);\r\n  const [commentText, onChangeCommentText, setCommentText] = useInput('');\r\n  \r\n  useEffect(() => {\r\n    if(addCommentDone) {\r\n      setCommentText('');\r\n    }\r\n  }, [addCommentDone]);\r\n\r\n  const onSubmitComment = useCallback(() => {\r\n    dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: {content: commentText, postId: post.id, userId: id},\r\n    });\r\n  }, [commentText, id]);\r\n  \r\n  return (\r\n    <Form onFinish={onSubmitComment}>\r\n      <Form.Item style={{position: 'relative', margin: 0}}>\r\n        <Input.TextArea value={commentText} onChange={onChangeCommentText} rows={4} />\r\n        <Button style={{position: 'absolute', right: 0, bottom: -40, zIndex: 1}} type=\"primary\" htmlType=\"submit\" loading={addCommentLoading}>술술</Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nCommentForm.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default CommentForm;"]},"metadata":{},"sourceType":"module"}