{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useCallback } from 'react';\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd';\nimport { RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\nimport moment from 'moment';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport { LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, REMOVE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport FollowButton from './FollowButton';\nmoment.locale('ko');\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    removePostLoading,\n    retweetError\n  } = useSelector(state => state.post);\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onUnLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const liked = post.Likers.find(v => v.id === id);\n  return /*#__PURE__*/_jsxs(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    children: [/*#__PURE__*/_jsx(Card, {\n      cover: post.Images[0] && /*#__PURE__*/_jsx(PostImages, {\n        images: post.Images\n      }),\n      actions: [/*#__PURE__*/_jsx(RetweetOutlined, {\n        onClick: onRetweet\n      }, \"retweet\"), liked ? /*#__PURE__*/_jsx(HeartTwoTone, {\n        twoToneColor: \"red\",\n        onClick: onUnLike\n      }, \"heart\") : /*#__PURE__*/_jsx(HeartOutlined, {\n        onClick: onLike\n      }), /*#__PURE__*/_jsx(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"comment\"), /*#__PURE__*/_jsx(Popover, {\n        content: /*#__PURE__*/_jsx(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxs(_Fragment, {\n            children: [/*#__PURE__*/_jsx(Button, {\n              children: \"\\uC218\\uC815\"\n            }), /*#__PURE__*/_jsx(Button, {\n              type: \"danger\",\n              loading: removePostLoading,\n              onClick: onRemovePost,\n              children: \"\\uC0AD\\uC81C\"\n            })]\n          }) : /*#__PURE__*/_jsx(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          })\n        }),\n        children: /*#__PURE__*/_jsx(EllipsisOutlined, {})\n      }, \"more\")],\n      title: post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null,\n      extra: id && /*#__PURE__*/_jsx(FollowButton, {\n        post: post\n      }),\n      children: post.RetweetId && post.Retweet ? /*#__PURE__*/_jsxs(Card, {\n        cover: post.Retweet.Images[0] && /*#__PURE__*/_jsx(PostImages, {\n          images: post.Retweet.Images\n        }),\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          style: {\n            float: 'right'\n          },\n          children: moment(post.createdAt).format('YYYY.MM.DD')\n        }), /*#__PURE__*/_jsx(Card.Meta, {\n          avatar: /*#__PURE__*/_jsx(Link, {\n            href: `/user/${post.Retweet.User.id}`,\n            children: /*#__PURE__*/_jsx(\"a\", {\n              children: /*#__PURE__*/_jsx(Avatar, {\n                children: post.User.nickname[0]\n              })\n            })\n          }),\n          title: post.Retweet.User.nickname,\n          description: /*#__PURE__*/_jsx(PostCardContent, {\n            postData: post.Retweet.content\n          })\n        })]\n      }) : /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          style: {\n            float: 'right'\n          },\n          children: moment(post.createdAt).format('YYYY.MM.DD')\n        }), /*#__PURE__*/_jsx(Card.Meta, {\n          avatar: /*#__PURE__*/_jsx(Link, {\n            href: `/user/${post.User.id}`,\n            children: /*#__PURE__*/_jsx(\"a\", {\n              children: /*#__PURE__*/_jsx(Avatar, {\n                children: post.User.nickname[0]\n              })\n            })\n          }),\n          title: post.User.nickname,\n          description: /*#__PURE__*/_jsx(PostCardContent, {\n            postData: post.content\n          })\n        })]\n      })\n    }), commentFormOpened && /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(CommentForm, {\n        post: post\n      }), /*#__PURE__*/_jsx(List, {\n        header: `${post.Comments.length}개의 댓글`,\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments,\n        renderItem: item => /*#__PURE__*/_jsx(\"li\", {\n          children: /*#__PURE__*/_jsx(Comment, {\n            author: item.User.nickname,\n            avatar: /*#__PURE__*/_jsx(Link, {\n              href: `/user/${item.User.id}`,\n              children: /*#__PURE__*/_jsx(\"a\", {\n                children: /*#__PURE__*/_jsx(Avatar, {\n                  children: post.User.nickname[0]\n                })\n              })\n            }),\n            content: item.content\n          })\n        })\n      })]\n    })]\n  });\n};\n\nexport default PostCard;","map":{"version":3,"sources":["C:/NodeJS/react-twitter/prepare/front/components/PostCard.js"],"names":["React","useState","useCallback","Button","Card","Popover","Avatar","List","Comment","RetweetOutlined","HeartOutlined","MessageOutlined","EllipsisOutlined","HeartTwoTone","useDispatch","useSelector","Link","moment","PostImages","CommentForm","PostCardContent","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","REMOVE_POST_REQUEST","RETWEET_REQUEST","FollowButton","locale","PostCard","post","dispatch","removePostLoading","retweetError","state","commentFormOpened","setCommentFormOpened","id","user","me","onLike","alert","type","data","onUnLike","onToggleComment","prev","onRemovePost","onRetweet","liked","Likers","find","v","marginBottom","Images","User","RetweetId","nickname","Retweet","float","createdAt","format","content","Comments","length","item"],"mappings":"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","sourcesContent":["import React, {useState, useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Button, Card, Popover, Avatar, List, Comment} from 'antd';\r\nimport {RetweetOutlined, HeartOutlined, MessageOutlined, EllipsisOutlined, HeartTwoTone} from '@ant-design/icons';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport Link from 'next/link';\r\nimport moment from 'moment';\r\n\r\nimport PostImages from './PostImages';\r\nimport CommentForm from './CommentForm';\r\nimport PostCardContent from './PostCardContent';\r\nimport {LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, REMOVE_POST_REQUEST, RETWEET_REQUEST} from '../reducers/post';\r\nimport FollowButton from './FollowButton';\r\n\r\nmoment.locale('ko');\r\n\r\nconst PostCard = ({post}) => {\r\n  const dispatch = useDispatch();\r\n  const {removePostLoading, retweetError} = useSelector((state) => state.post);\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const id = useSelector((state) => state.user.me?.id);\r\n\r\n  const onLike = useCallback(() => {\r\n    if(!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: LIKE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n  const onUnLike = useCallback(() => {\r\n    if(!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: UNLIKE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, []);\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened((prev) => !prev);\r\n  }, []);\r\n\r\n  const onRemovePost = useCallback(() => {\r\n    if(!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: REMOVE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, []);\r\n\r\n  const onRetweet = useCallback(() => {\r\n    if(!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n    return dispatch({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n\r\n  const liked = post.Likers.find((v) => v.id === id);\r\n  return (\r\n    <div style={{marginBottom: 20}}>\r\n      <Card \r\n        cover={post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\r\n          liked\r\n            ? <HeartTwoTone twoToneColor=\"red\" key=\"heart\" onClick={onUnLike} />\r\n            : <HeartOutlined onClick={onLike} />,\r\n          <MessageOutlined key=\"comment\" onClick={onToggleComment}/>,\r\n          <Popover key=\"more\" content={(\r\n            <Button.Group>\r\n              {id && post.User.id === id \r\n              ? (\r\n                <>\r\n                  <Button>수정</Button>\r\n                  <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button>\r\n                </>\r\n              )\r\n              : <Button>신고</Button>}\r\n            </Button.Group>\r\n          )}>\r\n            <EllipsisOutlined />\r\n          </Popover>,\r\n        ]}\r\n        title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\r\n        extra={id && <FollowButton post={post} />}\r\n      >\r\n        {post.RetweetId && post.Retweet\r\n        ? (\r\n          <Card\r\n            cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\r\n          >\r\n            <div style={{float: 'right'}}>{moment(post.createdAt).format('YYYY.MM.DD')}</div>\r\n            <Card.Meta\r\n              avatar={(\r\n                <Link href={`/user/${post.Retweet.User.id}`}>\r\n                  <a><Avatar>{post.User.nickname[0]}</Avatar></a>\r\n                </Link>\r\n              )}\r\n              title={post.Retweet.User.nickname}\r\n              description={<PostCardContent postData={post.Retweet.content} />}  \r\n            />\r\n          </Card>\r\n        )\r\n        : (\r\n          <>\r\n            <div style={{float: 'right'}}>{moment(post.createdAt).format('YYYY.MM.DD')}</div>\r\n            <Card.Meta\r\n              avatar={(\r\n                <Link href={`/user/${post.User.id}`}>\r\n                  <a><Avatar>{post.User.nickname[0]}</Avatar></a>\r\n                </Link>\r\n              )}\r\n              title={post.User.nickname}\r\n              description={<PostCardContent postData={post.content} />}  \r\n            /> \r\n          </> \r\n        )}\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <div>\r\n          <CommentForm post={post} />\r\n          <List \r\n            header={`${post.Comments.length}개의 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments}\r\n            renderItem={(item) => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={(\r\n                    <Link href={`/user/${item.User.id}`}>\r\n                      <a><Avatar>{post.User.nickname[0]}</Avatar></a>\r\n                    </Link>\r\n                  )}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </div>)}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    createdAt: PropTypes.string,\r\n    Comments: PropTypes.arrayOf(PropTypes.object),\r\n    Images: PropTypes.arrayOf(PropTypes.object),\r\n    Likers: PropTypes.arrayOf(PropTypes.object),\r\n    RetweetId: PropTypes.number,\r\n    Retweet: PropTypes.objectOf(PropTypes.any),\r\n  }).isRequired,\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}